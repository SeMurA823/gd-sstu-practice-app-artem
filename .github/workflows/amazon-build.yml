name: Deploy to Amazon EÐ¡2

on:

  push:
    branches:
      - main
      - 'release/**'

  pull_request:
    branches:
      - main
      - 'release/**'
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ecr-repo
defaults:
  run:
    shell: bash

jobs:
  build:
    name: Maven build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver-action.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          java-package: jdk
#
#      - name: Start test infrastructure
#        run: docker-compose up -d
#      - name: Build Maven
#        run: mvn package -D spring.profiles.active=test
      - name: Build Maven
        run: mvn package
      - name: SemVer workflow
        id: semver-action
        uses: kvendingoldo/semver-action@v1.7
        with:
          primary_branch: 'main'
      - name: Upload Maven build artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: target/*.jar
  publish:
    name: Push to ECR
    needs: build
    runs-on: ubuntu-latest
    outputs:
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifact

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build image and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{  needs.build.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          echo "BUILD DOCKER SUCCESSFUL"
  deploy:
    name: Deploy to EC2
    if: ${{ startsWith(needs.build.outputs.version, 'rc/') == false }}
    needs:
      - publish
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Create SSH key file
        env:
          IMAGE_TAG: ${{ needs.build.outputs.version }}
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          eval $(ssh-agent)
          ssh-add ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -p 1274 -A ec2-user@${{ secrets.IP_BASTION }} /home/ec2-user/bastion-scripts/ec2-connection.sh ${{ env.IMAGE_TAG }}
